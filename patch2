diff -upr ../mysql-8.0.13/storage/innobase/btr/btr0cur.cc /root/mysql-8.0.13/storage/innobase/btr/btr0cur.cc
--- ../mysql-8.0.13/storage/innobase/btr/btr0cur.cc	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/btr/btr0cur.cc	2018-12-17 01:19:03.839701488 +0800
@@ -3694,6 +3694,7 @@ dberr_t btr_cur_optimistic_update(
   }
 
   /* Do lock checking and undo logging */
+    //检查lock，主要的作用是检查lock并且将隐士锁转化为显示锁
   err = btr_cur_upd_lock_and_undo(flags, cursor, *offsets, update, cmpl_info,
                                   thr, mtr, &roll_ptr);
   if (err != DB_SUCCESS) {
diff -upr ../mysql-8.0.13/storage/innobase/include/btr0cur.h /root/mysql-8.0.13/storage/innobase/include/btr0cur.h
--- ../mysql-8.0.13/storage/innobase/include/btr0cur.h	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/include/btr0cur.h	2018-12-17 01:19:03.843701572 +0800
@@ -715,6 +715,7 @@ struct btr_cur_t {
   ulint tree_height{0};               /*!< Tree height if the search is done
                                       for a pessimistic insert or update
                                       operation */
+    //搜索条件中最右边的行的匹配的列数
   ulint up_match{0};                  /*!< If the search mode was PAGE_CUR_LE,
                                       the number of matched fields to the
                                       the first user record to the right of
@@ -733,6 +734,7 @@ struct btr_cur_t {
                                       right at the time cursor positioned;
                                       only used internally in searches: not
                                       defined after the search */
+    //搜索条件中最左边的行的匹配的列数
   ulint low_match{0};                 /*!< if search mode was PAGE_CUR_LE,
                                       the number of matched fields to the
                                       first user record AT THE CURSOR or
diff -upr ../mysql-8.0.13/storage/innobase/include/lock0lock.h /root/mysql-8.0.13/storage/innobase/include/lock0lock.h
--- ../mysql-8.0.13/storage/innobase/include/lock0lock.h	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/include/lock0lock.h	2018-12-17 01:19:03.843701572 +0800
@@ -33,6 +33,7 @@ this program; if not, write to the Free
 #ifndef lock0lock_h
 #define lock0lock_h
 
+
 #include "buf0types.h"
 #include "dict0types.h"
 #include "hash0hash.h"
@@ -774,6 +775,9 @@ void lock_rec_trx_wait(lock_t *lock, uli
 /** The lock system */
 extern lock_sys_t *lock_sys;
 
+/** check deadlock */
+void srv_deadlock_thread();
+
 /** Test if lock_sys->mutex can be acquired without waiting. */
 #define lock_mutex_enter_nowait() (lock_sys->mutex.trylock(__FILE__, __LINE__))
 
@@ -809,4 +813,8 @@ extern lock_sys_t *lock_sys;
 
 #include "lock0lock.ic"
 
+
+
+
+
 #endif
diff -upr ../mysql-8.0.13/storage/innobase/include/os0thread-create.h /root/mysql-8.0.13/storage/innobase/include/os0thread-create.h
--- ../mysql-8.0.13/storage/innobase/include/os0thread-create.h	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/include/os0thread-create.h	2018-12-17 01:19:03.843701572 +0800
@@ -155,6 +155,8 @@ void create_detached_thread(mysql_pfs_ke
   t.detach();
 }
 
+
+
 #ifdef UNIV_PFS_THREAD
 #define os_thread_create(...) create_detached_thread(__VA_ARGS__)
 #else
diff -upr ../mysql-8.0.13/storage/innobase/include/srv0srv.h /root/mysql-8.0.13/storage/innobase/include/srv0srv.h
--- ../mysql-8.0.13/storage/innobase/include/srv0srv.h	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/include/srv0srv.h	2018-12-17 07:59:53.194420563 +0800
@@ -160,6 +160,8 @@ struct Srv_threads {
   /** true if master thread is created */
   bool m_master_thread_active;
 
+/** true if master thread is created */
+  bool m_deadlock_thread_active;
   /** true if tablespace alter encrypt thread is created */
   bool m_ts_alter_encrypt_thread_active;
 };
@@ -635,6 +637,7 @@ extern mysql_pfs_key_t srv_purge_thread_
 extern mysql_pfs_key_t srv_worker_thread_key;
 extern mysql_pfs_key_t trx_recovery_rollback_thread_key;
 extern mysql_pfs_key_t srv_ts_alter_encrypt_thread_key;
+extern mysql_pfs_key_t srv_deadlock_thread_key;
 #endif /* UNIV_PFS_THREAD */
 #endif /* !UNIV_HOTBACKUP */
 
diff -upr ../mysql-8.0.13/storage/innobase/include/srv0start.h /root/mysql-8.0.13/storage/innobase/include/srv0start.h
--- ../mysql-8.0.13/storage/innobase/include/srv0start.h	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/include/srv0start.h	2018-12-17 01:19:03.843701572 +0800
@@ -175,8 +175,6 @@ extern enum srv_shutdown_t srv_shutdown_
 
 /** Call exit(3) */
 void srv_fatal_error() MY_ATTRIBUTE((noreturn));
-/**
-Shutdown all background threads created by InnoDB. */
-void srv_shutdown_all_bg_threads();
+
 
 #endif
diff -upr ../mysql-8.0.13/storage/innobase/include/trx0trx.ic /root/mysql-8.0.13/storage/innobase/include/trx0trx.ic
--- ../mysql-8.0.13/storage/innobase/include/trx0trx.ic	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/include/trx0trx.ic	2018-12-17 01:19:03.843701572 +0800
@@ -290,7 +290,7 @@ bool trx_is_high_priority(const trx_t *t
 @param[in] holder	Transaction holding the lock
 @return the transaction that will be rolled back, null don't care */
 UNIV_INLINE
-const trx_t *trx_arbitrate(const trx_t *requestor, const trx_t *holder) {
+trx_t *trx_arbitrate(trx_t *requestor, trx_t *holder) {
   ut_ad(!trx_is_autocommit_non_locking(holder));
   ut_ad(!trx_is_autocommit_non_locking(requestor));
 
diff -upr ../mysql-8.0.13/storage/innobase/lock/lock0lock.cc /root/mysql-8.0.13/storage/innobase/lock/lock0lock.cc
--- ../mysql-8.0.13/storage/innobase/lock/lock0lock.cc	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/lock/lock0lock.cc	2018-12-19 00:47:54.904261465 +0800
@@ -34,7 +34,7 @@ this program; if not, write to the Free
 
 #include <mysql/service_thd_engine_lock.h>
 #include <sys/types.h>
-
+#include <stdlib.h>
 #include <algorithm>
 #include <set>
 #include <unordered_map>
@@ -57,6 +57,7 @@ this program; if not, write to the Free
 #include "usr0sess.h"
 #include "ut0new.h"
 #include "ut0vec.h"
+#include "srv0start.h"
 
 #include "my_dbug.h"
 #include "my_psi_config.h"
@@ -118,7 +119,7 @@ class DeadlockChecker {
   @param trx the start transaction (start node)
   @param wait_lock lock that a transaction wants
   @param mark_start visited node counter */
-  DeadlockChecker(const trx_t *trx, const lock_t *wait_lock,
+  DeadlockChecker(trx_t *trx, const lock_t *wait_lock,
                   uint64_t mark_start)
       : m_cost(),
         m_start(trx),
@@ -207,16 +208,16 @@ class DeadlockChecker {
 
   /** Select the victim transaction that should be rolledback.
   @return victim transaction */
-  const trx_t *select_victim() const;
+  trx_t *select_victim() ;
 
   /** Rollback transaction selected as the victim. */
-  void trx_rollback();
+  void trx_rollback( trx_t *trx);
 
   /** Looks iteratively for a deadlock. Note: the joining transaction
   may have been granted its lock by the deadlock checks.
 
   @return 0 if no deadlock else the victim transaction.*/
-  const trx_t *search();
+  trx_t *search();
 
   /** Print transaction data to the deadlock file and possibly to stderr.
   @param trx transaction
@@ -257,12 +258,17 @@ class DeadlockChecker {
 
   /** Joining transaction that is requesting a lock in an
   incompatible mode */
-  const trx_t *m_start;
+    //请求锁的事务
+  trx_t *m_start;
+    
+    
+  trx_t *victim=NULL;
 
   /** true if search was too deep and was aborted */
   bool m_too_deep;
 
   /** Lock that trx wants */
+    //等待的锁
   const lock_t *m_wait_lock;
 
   /**  Value of lock_mark_count at the start of the deadlock check. */
@@ -454,6 +460,66 @@ static ulint lock_rec_lock_fold(const lo
   return (lock_rec_fold(lock->rec_lock.space, lock->rec_lock.page_no));
 }
 
+
+/** Worker thread that detect deadlock. */
+void srv_deadlock_thread() {
+    trx_t ** tmp_rw_trx_list;
+    int old_num=0;
+    while (1 ) {
+        usleep(1000000);
+        
+	ulint len = UT_LIST_GET_LEN(trx_sys->rw_trx_list);
+	if(old_num<len){
+		if(old_num>0){
+			delete[] tmp_rw_trx_list;
+		}
+		old_num=len;
+		tmp_rw_trx_list=new trx_t *[len];
+	}
+	mutex_enter(&trx_sys->mutex);
+        
+        //get all the rw list
+        
+        int i=0;
+        for (trx_t *t = UT_LIST_GET_FIRST(trx_sys->rw_trx_list); t != NULL;
+             t = UT_LIST_GET_NEXT(trx_list, t)) {
+            	trx_mutex_enter(t);
+		assert_trx_in_rw_list(t);
+		if(i>=len){
+			break;	
+		}
+		tmp_rw_trx_list[i++]=t;
+		//UT_LIST_ADD_FIRST(tmp_rw_trx_list,t);
+		trx_mutex_exit(t);
+        }
+        
+        mutex_exit(&trx_sys->mutex);
+        for (int j=0;j<i;j++) {
+		trx_t *t=tmp_rw_trx_list[j];
+            trx_mutex_enter(t);
+            if(t->state==TRX_STATE_ACTIVE){
+                if(t->lock.que_state==TRX_QUE_LOCK_WAIT){
+                    lock_mutex_enter();
+                    //rollback the transaction
+                    const trx_t *victim_trx = DeadlockChecker::check_and_resolve(t->lock.wait_lock, t);
+                    
+                    lock_mutex_exit();
+                }
+            }
+            
+            trx_mutex_exit(t);
+            
+        }
+        //for (trx_t *t = UT_LIST_GET_FIRST(tmp_rw_trx_list); t != NULL;
+          //   t = UT_LIST_GET_NEXT(trx_list, t)) {
+            
+           // UT_LIST_REMOVE(tmp_rw_trx_list,t);
+        //}
+        
+    }
+    //srv_threads.m_deadlock_thread_active=false;
+}
+
 /** Resize the lock hash tables.
 @param[in]	n_cells	number of slots in lock hash table */
 void lock_sys_resize(ulint n_cells) {
@@ -1063,7 +1129,7 @@ static trx_t *lock_rec_other_trx_holds_e
          t = UT_LIST_GET_NEXT(trx_list, t)) {
       const lock_t *expl_lock =
           lock_rec_has_expl(precise_mode, block, heap_no, t);
-
+        
       if (expl_lock && expl_lock->trx != impl_trx &&
           !can_trx_be_ignored(expl_lock->trx)) {
         /* An explicit lock is held by trx other than
@@ -1548,7 +1614,8 @@ dberr_t RecLock::deadlock_check(lock_t *
   ut_ad(lock->trx == m_trx);
   ut_ad(trx_mutex_own(m_trx));
 
-  const trx_t *victim_trx = DeadlockChecker::check_and_resolve(lock, m_trx);
+    const trx_t *victim_trx =NULL;
+    //DeadlockChecker::check_and_resolve(lock, m_trx);
 
   /* Check the outcome of the deadlock test. It is possible that
   the transaction that blocked our lock was rolled back and we
@@ -3905,7 +3972,8 @@ static dberr_t lock_table_enqueue_waitin
   /* Enqueue the lock request that will wait to be granted */
   lock = lock_table_create(table, mode | LOCK_WAIT, trx);
 
-  const trx_t *victim_trx = DeadlockChecker::check_and_resolve(lock, trx);
+    const trx_t *victim_trx =NULL;
+    //DeadlockChecker::check_and_resolve(lock, trx);
 
   if (victim_trx != 0) {
     ut_ad(victim_trx == trx);
@@ -5910,7 +5978,8 @@ dberr_t lock_clust_rec_modify_check_and_
   lock_mutex_enter();
 
   ut_ad(lock_table_has(thr_get_trx(thr), index->table, LOCK_IX));
-
+    //加锁，对于update加的是隐士锁，模式是LOCK_X | LOCK_REC_NOT_GAP，update,
+    //delete mark, or delete unmark
   err = lock_rec_lock(true, SELECT_ORDINARY, LOCK_X | LOCK_REC_NOT_GAP, block,
                       heap_no, index, thr);
 
@@ -6912,7 +6981,15 @@ const lock_t *DeadlockChecker::get_first
                                            lock->rec_lock.page_no);
 
     /* Position on the first lock on the physical record.*/
+      //如果这个page上没有此record的锁
     if (!lock_rec_get_nth_bit(lock, *heap_no)) {
+        //由于行锁是加在一个page上的，所以这里是在获取下一个加在此page上的行锁，一定能获取到，因为内部是这样写的。
+        /**
+         do {
+         ut_ad(lock_get_type_low(lock) == LOCK_REC);
+         lock = lock_rec_get_next_on_page(lock);
+         } while (lock != nullptr && !lock_rec_get_nth_bit(lock, heap_no));
+         **/
       lock = lock_rec_get_next_const(*heap_no, lock);
     }
 
@@ -6982,14 +7059,14 @@ void DeadlockChecker::notify(const lock_
 
 /** Select the victim transaction that should be rolledback.
 @return victim transaction */
-const trx_t *DeadlockChecker::select_victim() const {
+trx_t *DeadlockChecker::select_victim()  {
   ut_ad(lock_mutex_own());
   ut_ad(m_start->lock.wait_lock != 0);
   ut_ad(m_wait_lock->trx != m_start);
 
   if (thd_trx_priority(m_start->mysql_thd) > 0 ||
       thd_trx_priority(m_wait_lock->trx->mysql_thd) > 0) {
-    const trx_t *victim;
+    trx_t *victim;
 
     victim = trx_arbitrate(m_start, m_wait_lock->trx);
 
@@ -7011,9 +7088,9 @@ const trx_t *DeadlockChecker::select_vic
 /** Looks iteratively for a deadlock. Note: the joining transaction may
 have been granted its lock by the deadlock checks.
 @return 0 if no deadlock else the victim transaction instance.*/
-const trx_t *DeadlockChecker::search() {
+trx_t *DeadlockChecker::search() {
   ut_ad(lock_mutex_own());
-  ut_ad(!trx_mutex_own(m_start));
+  //ut_ad(!trx_mutex_own(m_start));
 
   ut_ad(m_start != NULL);
   ut_ad(m_wait_lock != NULL);
@@ -7022,15 +7099,17 @@ const trx_t *DeadlockChecker::search() {
 
   /* Look at the locks ahead of wait_lock in the lock queue. */
   ulint heap_no;
+    //获取次heap no上的第一个锁,一定不是wating状态
   const lock_t *lock = get_first_lock(&heap_no);
 
   for (;;) {
     /* We should never visit the same sub-tree more than once. */
     ut_ad(lock == NULL || !is_visited(lock));
 
+      //找到下一个需要检查的wating lock以及事务
     while (m_n_elems > 0 && lock == NULL) {
       /* Restore previous search state. */
-
+    
       pop(lock, heap_no);
 
       lock = get_next_lock(lock, heap_no);
@@ -7040,6 +7119,7 @@ const trx_t *DeadlockChecker::search() {
       break;
     } else if (lock == m_wait_lock) {
       /* We can mark this subtree as searched */
+        //这里是什么意思，为什么lock==m_wait_lock会发生,因为wating的lock会在链表的最后，所以如果一直获取next lock的话一定会获取到这个wating状态的lock
       ut_ad(lock->trx->lock.deadlock_mark <= m_mark_start);
 
       lock->trx->lock.deadlock_mark = ++s_lock_mark_counter;
@@ -7090,10 +7170,11 @@ const trx_t *DeadlockChecker::search() {
       m_too_deep = true;
       return (m_start);
 
-    } else if (lock->trx_que_state() == TRX_QUE_LOCK_WAIT) {
+    } else if (lock->trx_que_state() == TRX_QUE_LOCK_WAIT && lock->trx!=m_start) {
       /* Another trx ahead has requested a lock in an
       incompatible mode, and is itself waiting for a lock. */
-
+        //持有这个锁的事务正在等待其它锁
+        
       ++m_cost;
 
       if (!push(lock, heap_no)) {
@@ -7145,14 +7226,14 @@ void DeadlockChecker::rollback_print(con
 }
 
 /** Rollback transaction selected as the victim. */
-void DeadlockChecker::trx_rollback() {
+void DeadlockChecker::trx_rollback(trx_t *trx) {
   ut_ad(lock_mutex_own());
 
-  trx_t *trx = m_wait_lock->trx;
+  //trx_t *trx = m_wait_lock->trx;
 
-  print("*** WE ROLL BACK TRANSACTION (1)\n");
+  
 
-  trx_mutex_enter(trx);
+  
 
   trx->owns_mutex = true;
 
@@ -7162,7 +7243,6 @@ void DeadlockChecker::trx_rollback() {
 
   trx->owns_mutex = false;
 
-  trx_mutex_exit(trx);
 }
 
 /** Checks if a joining lock request results in a deadlock. If a deadlock is
@@ -7199,9 +7279,9 @@ const trx_t *DeadlockChecker::check_and_
   its state can only be changed by this thread, which is
   currently associated with the transaction. */
 
-  trx_mutex_exit(trx);
+  //trx_mutex_exit(trx);
 
-  const trx_t *victim_trx;
+  trx_t *victim_trx=NULL;
 
   /* Try and resolve as many deadlocks as possible. */
   do {
@@ -7214,35 +7294,49 @@ const trx_t *DeadlockChecker::check_and_
     transaction that is holding the lock that the joining
     transaction wants. */
     if (checker.is_too_deep()) {
-      ut_ad(trx == checker.m_start);
-      ut_ad(trx == victim_trx);
+      //ut_ad(trx == checker.m_start);
+      //ut_ad(trx == victim_trx);
 
       rollback_print(victim_trx, lock);
-
+        print("*** WE ROLL BACK TRANSACTION (2)\n");
+      checker.trx_rollback(trx);
+      lock_deadlock_found = true;
+        
       MONITOR_INC(MONITOR_DEADLOCK);
 
       break;
 
-    } else if (victim_trx != NULL && victim_trx != trx) {
-      ut_ad(victim_trx == checker.m_wait_lock->trx);
-
-      checker.trx_rollback();
+    } else if (victim_trx != NULL ) {
+        //ut_ad(victim_trx == checker.m_wait_lock->trx);
+        if(victim_trx != trx){
+            trx_mutex_enter(victim_trx);
+            print("*** WE ROLL BACK TRANSACTION (1)\n");
+            checker.trx_rollback(victim_trx);
+            trx_mutex_exit(victim_trx);
+        }else{
+            print("*** WE ROLL BACK TRANSACTION (2)\n");
+            checker.trx_rollback(trx);
+        }
+      
 
       lock_deadlock_found = true;
 
       MONITOR_INC(MONITOR_DEADLOCK);
+        if(victim_trx == trx){
+            break;
+        }
     }
 
-  } while (victim_trx != NULL && victim_trx != trx);
+  } while (victim_trx != NULL);
 
   /* If the joining transaction was selected as the victim. */
   if (victim_trx != NULL) {
-    print("*** WE ROLL BACK TRANSACTION (2)\n");
+    //print("*** WE ROLL BACK TRANSACTION (2)\n");
 
     lock_deadlock_found = true;
   }
 
-  trx_mutex_enter(trx);
+  //trx_mutex_enter(trx);
 
   return (victim_trx);
 }
diff -upr ../mysql-8.0.13/storage/innobase/read/read0read.cc /root/mysql-8.0.13/storage/innobase/read/read0read.cc
--- ../mysql-8.0.13/storage/innobase/read/read0read.cc	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/read/read0read.cc	2018-12-17 01:19:03.847701656 +0800
@@ -551,6 +551,8 @@ void MVCC::view_open(ReadView *&view, tr
   if (view != NULL) {
     view->prepare(trx->id);
 
+    
+
     UT_LIST_ADD_FIRST(m_views, view);
 
     ut_ad(!view->is_closed());
diff -upr ../mysql-8.0.13/storage/innobase/row/row0ins.cc /root/mysql-8.0.13/storage/innobase/row/row0ins.cc
--- ../mysql-8.0.13/storage/innobase/row/row0ins.cc	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/row/row0ins.cc	2018-12-17 01:19:03.847701656 +0800
@@ -1830,6 +1830,7 @@ static ibool row_ins_dupl_error_with_rec
 
   matched_fields = 0;
 
+    //比较重复行，matched_fields是相等的filelds的数量
   cmp_dtuple_rec_with_match(entry, rec, index, offsets, &matched_fields);
 
   if (matched_fields < n_unique) {
@@ -1846,7 +1847,7 @@ static ibool row_ins_dupl_error_with_rec
       }
     }
   }
-
+//delete标志的index不算相等
   return (!rec_get_deleted_flag(rec, rec_offs_comp(offsets)));
 }
 
@@ -2130,17 +2131,22 @@ static MY_ATTRIBUTE((warn_unused_result)
   user records on the leaf level. So, even if low_match would suggest
   that a duplicate key violation may occur, this may not be the case. */
 
+    //索引的列的数量
   n_unique = dict_index_get_n_unique(cursor->index);
 
+    //low match是找到的行的列数，这个if比较是指找到了一个重复的行
   if (cursor->low_match >= n_unique) {
+      //获得行数据
     rec = btr_cur_get_rec(cursor);
 
+      //不是最低的一行
     if (!page_rec_is_infimum(rec)) {
       offsets =
           rec_get_offsets(rec, cursor->index, offsets, ULINT_UNDEFINED, &heap);
 
       ulint lock_type;
 
+        //可以看到加锁的模式是TRX_ISO_READ_COMMITTED或者打开了no gap标志就是LOCK_REC_NOT_GAP
       lock_type = ((trx->isolation_level <= TRX_ISO_READ_COMMITTED) ||
                    (cursor->index->table->skip_gap_locks()))
                       ? LOCK_REC_NOT_GAP
@@ -2344,6 +2350,7 @@ static void row_ins_temp_prebuilt_tree_m
  unique key violation error occurs. The delete marked record is then
  updated to an existing record, and we must write an undo log record on
  the delete marked record.
+ 直接在删除的行上面进行更新
  @retval DB_SUCCESS on success
  @retval DB_LOCK_WAIT on lock wait when !(flags & BTR_NO_LOCKING_FLAG)
  @retval DB_FAIL if retry with BTR_MODIFY_TREE is needed
@@ -2503,6 +2510,7 @@ and return. don't execute actual insert.
     }
 
     ut_ad(thr != NULL);
+      //修改已删除的行，
     err = row_ins_clust_index_entry_by_modify(&pcur, flags, mode, &offsets,
                                               &offsets_heap, entry_heap, entry,
                                               thr, &mtr);
diff -upr ../mysql-8.0.13/storage/innobase/srv/srv0srv.cc /root/mysql-8.0.13/storage/innobase/srv/srv0srv.cc
--- ../mysql-8.0.13/storage/innobase/srv/srv0srv.cc	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/srv/srv0srv.cc	2018-12-17 01:19:03.847701656 +0800
@@ -1754,6 +1754,8 @@ const char *srv_any_background_threads_a
     thread_active = "buf_dump_thread";
   } else if (srv_threads.m_buf_resize_thread_active) {
     thread_active = "buf_resize_thread";
+  } else if(srv_threads.m_deadlock_thread_active){
+    thread_active = "deadlock_thread";
   }
 
   os_event_set(srv_error_event);
@@ -2693,6 +2695,10 @@ void srv_worker_thread() {
   my_thread_end();
 }
 
+
+
+
+
 /** Do the actual purge operation.
  @return length of history list before the last purge batch. */
 static ulint srv_do_purge(
diff -upr ../mysql-8.0.13/storage/innobase/srv/srv0start.cc /root/mysql-8.0.13/storage/innobase/srv/srv0start.cc
--- ../mysql-8.0.13/storage/innobase/srv/srv0start.cc	2018-10-07 16:44:22.000000000 +0800
+++ /root/mysql-8.0.13/storage/innobase/srv/srv0start.cc	2018-12-17 07:58:29.456686014 +0800
@@ -97,7 +97,6 @@ this program; if not, write to the Free
 #include "dict0crea.h"
 #include "dict0load.h"
 #include "dict0stats_bg.h"
-#include "lock0lock.h"
 #include "os0event.h"
 #include "os0proc.h"
 #include "pars0pars.h"
@@ -119,6 +118,10 @@ this program; if not, write to the Free
 /** fil_space_t::flags for hard-coded tablespaces */
 extern ulint predefined_flags;
 
+extern void srv_deadlock_thread();
+
+void srv_start_deadlock_detect_thread();
+
 /** Recovered persistent metadata */
 static MetadataRecover *srv_dict_metadata;
 
@@ -154,8 +157,9 @@ enum srv_start_state_t {
   SRV_START_STATE_MONITOR = 4,  /*!< Started montior thread */
   SRV_START_STATE_MASTER = 8,   /*!< Started master threadd. */
   SRV_START_STATE_PURGE = 16,   /*!< Started purge thread(s) */
-  SRV_START_STATE_STAT = 32     /*!< Started bufdump + dict stat
+  SRV_START_STATE_STAT = 32,     /*!< Started bufdump + dict stat
                                 and FTS optimize thread. */
+  SRV_START_STATE_DEADLOCKDETECT = 64,   /*!< Started purge thread(s) */
 };
 
 /** Track server thrd starting phases */
@@ -196,6 +200,7 @@ mysql_pfs_key_t srv_purge_thread_key;
 mysql_pfs_key_t srv_worker_thread_key;
 mysql_pfs_key_t trx_recovery_rollback_thread_key;
 mysql_pfs_key_t srv_ts_alter_encrypt_thread_key;
+mysql_pfs_key_t srv_deadlock_thread_key;
 #endif /* UNIV_PFS_THREAD */
 
 #ifdef HAVE_PSI_STAGE_INTERFACE
@@ -2458,6 +2463,8 @@ files_checked:
     os_thread_create(srv_monitor_thread_key, srv_monitor_thread);
 
     srv_start_state_set(SRV_START_STATE_MONITOR);
+      
+      srv_start_deadlock_detect_thread();
   }
 
   srv_sys_tablespaces_open = true;
@@ -2515,6 +2522,7 @@ files_checked:
 
   ib::info(ER_IB_MSG_1151, INNODB_VERSION_STR, log_get_lsn(*log_sys));
 
+    
   return (DB_SUCCESS);
 }
 
@@ -2593,6 +2601,19 @@ void srv_start_purge_threads() {
   srv_start_state_set(SRV_START_STATE_PURGE);
 }
 
+/** Start deadlock detect threads. */
+void srv_start_deadlock_detect_thread() {
+    /* Start  threads only if they are not started
+     earlier. */
+    if (srv_start_state_is_set(SRV_START_STATE_DEADLOCKDETECT)) {
+        return;
+    }
+    os_thread_create(srv_deadlock_thread_key,srv_deadlock_thread);
+    
+    srv_start_state_set(SRV_START_STATE_DEADLOCKDETECT);
+    srv_threads.m_deadlock_thread_active=true;
+}
+
 /** Start up the remaining InnoDB service threads.
 @param[in]	bootstrap	True if this is in bootstrap */
 void srv_start_threads(bool bootstrap) {
